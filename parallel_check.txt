(.venv) harshinisaidonepudi@Harshinis-MacBook-Pro mle-module-3-HarshiniDonepudi % python -u "/Users/harshinisaidonepudi/github-classroom/Cornell-Tech-ML/m
le-module-3-HarshiniDonepudi/project/parallel_check.py"
MAP
 
================================================================================
 Parallel Accelerator Optimizing:  Function tensor_map.<locals>._map, 
/Users/harshinisaidonepudi/github-classroom/Cornell-Tech-ML/mle-
module-3-HarshiniDonepudi/minitorch/fast_ops.py (154)  
================================================================================


Parallel loop listing for  Function tensor_map.<locals>._map, /Users/harshinisaidonepudi/github-classroom/Cornell-Tech-ML/mle-module-3-HarshiniDonepudi/minitorch/fast_ops.py (154) 
--------------------------------------------------------------------------|loop #ID
    def _map(                                                             | 
        out: Storage,                                                     | 
        out_shape: Shape,                                                 | 
        out_strides: Strides,                                             | 
        in_storage: Storage,                                              | 
        in_shape: Shape,                                                  | 
        in_strides: Strides,                                              | 
    ) -> None:                                                            | 
        # TODO: Implement for Task 3.1                                    | 
        for i in prange(len(out)):----------------------------------------| #2
            out_index = np.zeros(MAX_DIMS, np.int32)----------------------| #0
            in_index = np.zeros(MAX_DIMS, np.int32)-----------------------| #1
            to_index(i, out_shape, out_index)                             | 
            broadcast_index(out_index, out_shape, in_shape, in_index)     | 
            data = in_storage[index_to_position(in_index, in_strides)]    | 
            map_data = fn(data)                                           | 
            out[index_to_position(out_index, out_strides)] = map_data     | 
                                                                          | 
        # raise NotImplementedError("Need to implement for Task 3.1")     | 
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 3 parallel for-
loop(s) (originating from loops labelled: #2, #0, #1).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...
 
+--2 is a parallel loop
   +--0 --> rewritten as a serial loop
   +--1 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--2 (parallel)
   +--0 (parallel)
   +--1 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--2 (parallel)
   +--0 (serial)
   +--1 (serial)


 
Parallel region 0 (loop #2) had 0 loop(s) fused and 2 loop(s) serialized as part
 of the larger parallel loop (#2).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at 
/Users/harshinisaidonepudi/github-classroom/Cornell-Tech-ML/mle-
module-3-HarshiniDonepudi/minitorch/fast_ops.py (164) is hoisted out of the 
parallel loop labelled #2 (it will be performed before the loop is executed and 
reused inside the loop):
   Allocation:: out_index = np.zeros(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at 
/Users/harshinisaidonepudi/github-classroom/Cornell-Tech-ML/mle-
module-3-HarshiniDonepudi/minitorch/fast_ops.py (165) is hoisted out of the 
parallel loop labelled #2 (it will be performed before the loop is executed and 
reused inside the loop):
   Allocation:: in_index = np.zeros(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
None
ZIP
 
================================================================================
 Parallel Accelerator Optimizing:  Function tensor_zip.<locals>._zip, 
/Users/harshinisaidonepudi/github-classroom/Cornell-Tech-ML/mle-
module-3-HarshiniDonepudi/minitorch/fast_ops.py (199)  
================================================================================


Parallel loop listing for  Function tensor_zip.<locals>._zip, /Users/harshinisaidonepudi/github-classroom/Cornell-Tech-ML/mle-module-3-HarshiniDonepudi/minitorch/fast_ops.py (199) 
-------------------------------------------------------------------------|loop #ID
    def _zip(                                                            | 
        out: Storage,                                                    | 
        out_shape: Shape,                                                | 
        out_strides: Strides,                                            | 
        a_storage: Storage,                                              | 
        a_shape: Shape,                                                  | 
        a_strides: Strides,                                              | 
        b_storage: Storage,                                              | 
        b_shape: Shape,                                                  | 
        b_strides: Strides,                                              | 
    ) -> None:                                                           | 
        # TODO: Implement for Task 3.1.                                  | 
        for i in prange(len(out)):---------------------------------------| #6
            a_index = np.zeros(MAX_DIMS, np.int32)-----------------------| #3
            b_index = np.zeros(MAX_DIMS, np.int32)-----------------------| #4
            o_index = np.zeros(MAX_DIMS, np.int32)-----------------------| #5
            to_index(i, out_shape, o_index)                              | 
            broadcast_index(o_index, out_shape, a_shape, a_index)        | 
            broadcast_index(o_index, out_shape, b_shape, b_index)        | 
            a_data = a_storage[index_to_position(a_index, a_strides)]    | 
            b_data = b_storage[index_to_position(b_index, b_strides)]    | 
            map_data = fn(a_data, b_data)                                | 
            out[index_to_position(o_index, out_strides)] = map_data      | 
        # raise NotImplementedError("Need to implement for Task 3.1")    | 
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 4 parallel for-
loop(s) (originating from loops labelled: #6, #3, #4, #5).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...
 
+--6 is a parallel loop
   +--3 --> rewritten as a serial loop
   +--4 --> rewritten as a serial loop
   +--5 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--6 (parallel)
   +--3 (parallel)
   +--4 (parallel)
   +--5 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--6 (parallel)
   +--3 (serial)
   +--4 (serial)
   +--5 (serial)


 
Parallel region 0 (loop #6) had 0 loop(s) fused and 3 loop(s) serialized as part
 of the larger parallel loop (#6).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at 
/Users/harshinisaidonepudi/github-classroom/Cornell-Tech-ML/mle-
module-3-HarshiniDonepudi/minitorch/fast_ops.py (212) is hoisted out of the 
parallel loop labelled #6 (it will be performed before the loop is executed and 
reused inside the loop):
   Allocation:: a_index = np.zeros(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at 
/Users/harshinisaidonepudi/github-classroom/Cornell-Tech-ML/mle-
module-3-HarshiniDonepudi/minitorch/fast_ops.py (213) is hoisted out of the 
parallel loop labelled #6 (it will be performed before the loop is executed and 
reused inside the loop):
   Allocation:: b_index = np.zeros(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at 
/Users/harshinisaidonepudi/github-classroom/Cornell-Tech-ML/mle-
module-3-HarshiniDonepudi/minitorch/fast_ops.py (214) is hoisted out of the 
parallel loop labelled #6 (it will be performed before the loop is executed and 
reused inside the loop):
   Allocation:: o_index = np.zeros(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
None
REDUCE
 
================================================================================
 Parallel Accelerator Optimizing:  Function tensor_reduce.<locals>._reduce, 
/Users/harshinisaidonepudi/github-classroom/Cornell-Tech-ML/mle-
module-3-HarshiniDonepudi/minitorch/fast_ops.py (246)  
================================================================================


Parallel loop listing for  Function tensor_reduce.<locals>._reduce, /Users/harshinisaidonepudi/github-classroom/Cornell-Tech-ML/mle-module-3-HarshiniDonepudi/minitorch/fast_ops.py (246) 
-------------------------------------------------------------------------|loop #ID
    def _reduce(                                                         | 
        out: Storage,                                                    | 
        out_shape: Shape,                                                | 
        out_strides: Strides,                                            | 
        a_storage: Storage,                                              | 
        a_shape: Shape,                                                  | 
        a_strides: Strides,                                              | 
        reduce_dim: int,                                                 | 
    ) -> None:                                                           | 
        # TODO: Implement for Task 3.1.                                  | 
        reduce_size = a_shape[reduce_dim]                                | 
        for i in prange(len(out)):---------------------------------------| #8
            out_index = np.zeros(MAX_DIMS, np.int32)---------------------| #7
            to_index(i, out_shape, out_index)                            | 
            o = index_to_position(out_index, out_strides)                | 
            out_index[reduce_dim] = 0                                    | 
            a = index_to_position(out_index, a_strides)                  | 
            reduce_original = a_strides[reduce_dim]                      | 
            temp = out[o]                                                | 
            for s in range(reduce_size):                                 | 
                temp = fn(temp, a_storage[a + s * reduce_original])      | 
            out[o] = temp                                                | 
        # raise NotImplementedError("Need to implement for Task 3.1")    | 
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 2 parallel for-
loop(s) (originating from loops labelled: #8, #7).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...
 
+--8 is a parallel loop
   +--7 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--8 (parallel)
   +--7 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--8 (parallel)
   +--7 (serial)


 
Parallel region 0 (loop #8) had 0 loop(s) fused and 1 loop(s) serialized as part
 of the larger parallel loop (#8).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at 
/Users/harshinisaidonepudi/github-classroom/Cornell-Tech-ML/mle-
module-3-HarshiniDonepudi/minitorch/fast_ops.py (258) is hoisted out of the 
parallel loop labelled #8 (it will be performed before the loop is executed and 
reused inside the loop):
   Allocation:: out_index = np.zeros(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
None
MATRIX MULTIPLY
 
================================================================================
 Parallel Accelerator Optimizing:  Function _tensor_matrix_multiply, 
/Users/harshinisaidonepudi/github-classroom/Cornell-Tech-ML/mle-
module-3-HarshiniDonepudi/minitorch/fast_ops.py (273)  
================================================================================


Parallel loop listing for  Function _tensor_matrix_multiply, /Users/harshinisaidonepudi/github-classroom/Cornell-Tech-ML/mle-module-3-HarshiniDonepudi/minitorch/fast_ops.py (273) 
----------------------------------------------------------------------------------------------|loop #ID
def _tensor_matrix_multiply(                                                                  | 
    out: Storage,                                                                             | 
    out_shape: Shape,                                                                         | 
    out_strides: Strides,                                                                     | 
    a_storage: Storage,                                                                       | 
    a_shape: Shape,                                                                           | 
    a_strides: Strides,                                                                       | 
    b_storage: Storage,                                                                       | 
    b_shape: Shape,                                                                           | 
    b_strides: Strides,                                                                       | 
) -> None:                                                                                    | 
    """                                                                                       | 
    NUMBA tensor matrix multiply function.                                                    | 
                                                                                              | 
    Should work for any tensor shapes that broadcast as long as                               | 
                                                                                              | 
    ```                                                                                       | 
    assert a_shape[-1] == b_shape[-2]                                                         | 
    ```                                                                                       | 
                                                                                              | 
    Optimizations:                                                                            | 
                                                                                              | 
    * Outer loop in parallel                                                                  | 
    * No index buffers or function calls                                                      | 
    * Inner loop should have no global writes, 1 multiply.                                    | 
                                                                                              | 
                                                                                              | 
    Args:                                                                                     | 
        out (Storage): storage for `out` tensor                                               | 
        out_shape (Shape): shape for `out` tensor                                             | 
        out_strides (Strides): strides for `out` tensor                                       | 
        a_storage (Storage): storage for `a` tensor                                           | 
        a_shape (Shape): shape for `a` tensor                                                 | 
        a_strides (Strides): strides for `a` tensor                                           | 
        b_storage (Storage): storage for `b` tensor                                           | 
        b_shape (Shape): shape for `b` tensor                                                 | 
        b_strides (Strides): strides for `b` tensor                                           | 
                                                                                              | 
    Returns:                                                                                  | 
        None : Fills in `out`                                                                 | 
    """                                                                                       | 
    a_batch_stride = a_strides[0] if a_shape[0] > 1 else 0                                    | 
    b_batch_stride = b_strides[0] if b_shape[0] > 1 else 0                                    | 
                                                                                              | 
    # TODO: Implement for Task 3.2.                                                           | 
    row_a = a_strides[2]                                                                      | 
                                                                                              | 
    # Want to get columns of B assuming a 3D matrix                                           | 
    col_b = b_strides[1]                                                                      | 
                                                                                              | 
    # Defines the blocks per grid                                                             | 
    C = a_shape[-1]                                                                           | 
                                                                                              | 
    # There are no index buffers or function calls                                            | 
    for i in prange(0, out_shape[0]):  # Outer loop in parallel-------------------------------| #9
        for j in range(0, out_shape[1]):  # Loop for rows                                     | 
            for k in range(0, out_shape[2]):  # Loop for rows                                 | 
                                                                                              | 
                temp = 0.0                                                                    | 
                l = i * a_batch_stride + j * a_strides[1]  # row strides                      | 
                m = i * b_batch_stride + k * b_strides[2]  # col strides                      | 
                for _ in range(0, C):  # Summation loop with                                  | 
                    temp += (                                                                 | 
                        a_storage[l] * b_storage[m]                                           | 
                    )  # Only one multiply in innermost loop                                  | 
                    l += row_a  # Update l                                                    | 
                    m += col_b  # Update m                                                    | 
                                                                                              | 
                out[                                                                          | 
                    i * out_strides[0] + j * out_strides[1] + k * out_strides[2]              | 
                ] = temp  # Make out for i,j and k equal to our temporary storage variable    | 
                                                                                              | 
    # raise NotImplementedError("Need to implement for Task 3.2")                             | 
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 1 parallel for-
loop(s) (originating from loops labelled: #9).
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel structure is already optimal.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
No allocation hoisting found
None